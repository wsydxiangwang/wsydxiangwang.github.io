(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{376:function(_,v,t){_.exports=t.p+"assets/img/6.b2ff047e.jpg"},377:function(_,v,t){_.exports=t.p+"assets/img/5.8eb24cb5.jpg"},378:function(_,v,t){_.exports=t.p+"assets/img/4.84cee6fd.jpg"},512:function(_,v,t){"use strict";t.r(v);var s=t(33),e=Object(s.a)({},(function(){var _=this,v=_.$createElement,s=_._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器输入url后发生了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器输入url后发生了什么"}},[_._v("#")]),_._v(" 浏览器输入URL后发生了什么")]),_._v(" "),s("h2",{attrs:{id:"dns-域名解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns-域名解析"}},[_._v("#")]),_._v(" DNS 域名解析")]),_._v(" "),s("p",[_._v("在网络世界，你肯定记得住网站的名称，但是很难记住网站的 IP 地址，因而也需要一个地址簿，就是 DNS 服务器。DNS 服务器是高可用、高并发和分布式的，它是树状结构，如图：")]),_._v(" "),s("p",[s("img",{attrs:{src:t(376),alt:""}})]),_._v(" "),s("ul",[s("li",[_._v("根 DNS 服务器 ：返回顶级域 DNS 服务器的 IP 地址")]),_._v(" "),s("li",[_._v("顶级域 DNS 服务器：返回权威 DNS 服务器的 IP 地址")]),_._v(" "),s("li",[_._v("权威 DNS 服务器 ：返回相应主机的 IP 地址")])]),_._v(" "),s("p",[_._v("DNS的域名查找，在客户端和浏览器，本地DNS之间的查询方式是递归查询；在本地DNS服务器与根域及其子域之间的查询方式是迭代查询；")]),_._v(" "),s("p",[s("img",{attrs:{src:t(377),alt:""}})]),_._v(" "),s("p",[_._v("在客户端输入 URL 后，会有一个递归查找的过程，"),s("strong",[_._v("从浏览器缓存中查找->本地的hosts文件查找->找本地DNS解析器缓存查找->本地DNS服务器查找")]),_._v("，这个过程中任何一步找到了都会结束查找流程。")]),_._v(" "),s("p",[s("strong",[_._v("如果本地DNS服务器无法查询到，则根据本地DNS服务器设置的转发器进行查询。若未用转发模式，则"),s("code",[_._v("迭代查找")]),_._v("过程如下图：")])]),_._v(" "),s("p",[s("img",{attrs:{src:t(378),alt:""}})]),_._v(" "),s("p",[s("strong",[_._v("浏览器通过向 DNS 服务器发送域名，DNS 服务器查询到与域名相对应的 IP 地址，然后返回给浏览器，浏览器再将 IP 地址打在协议上，同时请求参数也会在协议搭载，然后一并发送给对应的服务器。")])]),_._v(" "),s("p",[_._v("当然，值得注意的是，浏览器提供了DNS数据缓存功能。即如果一个域名已经解析过，那会把解析的结果缓存下来，下次处理直接走缓存，不需要经过 DNS解析。")]),_._v(" "),s("h2",{attrs:{id:"发起-tcp-连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发起-tcp-连接"}},[_._v("#")]),_._v(" 发起 TCP 连接")]),_._v(" "),s("p",[_._v("TCP连接建立，两次不安全，四次浪费资源，三次刚刚好。")]),_._v(" "),s("p",[_._v("从最开始双方都处于"),s("code",[_._v("CLOSED")]),_._v("状态。然后服务端开始监听某个端口，进入了"),s("code",[_._v("LISTEN")]),_._v("状态。")]),_._v(" "),s("ul",[s("li",[_._v("第一次握手")])]),_._v(" "),s("p",[_._v("客户端主动发起连接，发送"),s("code",[_._v("SYN")]),_._v(", 发送完毕后，客户端进入"),s("code",[_._v("SYN-SENT")]),_._v("状态。")]),_._v(" "),s("ul",[s("li",[_._v("第二次握手")])]),_._v(" "),s("p",[_._v("服务端接收到，返回"),s("code",[_._v("SYN和ACK")]),_._v("(对应客户端发来的SYN)，发送完毕后，服务器端进入"),s("code",[_._v("SYN_RCVD")]),_._v("状态。")]),_._v(" "),s("ul",[s("li",[_._v("第三次握手")])]),_._v(" "),s("p",[_._v("客户端再发送"),s("code",[_._v("ACK")]),_._v("给服务端，发送完毕后，客户端进入"),s("code",[_._v("ESTABLISHED")]),_._v("状态；服务端收到ACK之后，也进入"),s("code",[_._v("ESTABLISHED")]),_._v("状态，TCP 握手结束。")]),_._v(" "),s("h2",{attrs:{id:"发送http请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发送http请求"}},[_._v("#")]),_._v(" 发送HTTP请求")]),_._v(" "),s("p",[s("strong",[_._v("TCP 三次握手结束后，开始发送 HTTP 请求报文。")])]),_._v(" "),s("p",[_._v("请求报文由请求行（request line）、请求头（header）、请求体三个部分组成,如下图所示：")]),_._v(" "),s("h2",{attrs:{id:"服务器处理请求并返回响应结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器处理请求并返回响应结果"}},[_._v("#")]),_._v(" 服务器处理请求并返回响应结果")]),_._v(" "),s("h2",{attrs:{id:"浏览器解析渲染页面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器解析渲染页面"}},[_._v("#")]),_._v(" 浏览器解析渲染页面")]),_._v(" "),s("h3",{attrs:{id:"构建-dom-树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建-dom-树"}},[_._v("#")]),_._v(" 构建 DOM 树")]),_._v(" "),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[_._v("#")])]),_._v(" "),s("h2",{attrs:{id:"断开连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#断开连接"}},[_._v("#")]),_._v(" 断开连接")]),_._v(" "),s("p",[_._v("四次挥手后，client和server成功地断开了连接~")]),_._v(" "),s("p",[_._v("刚开始双方处于"),s("code",[_._v("ESTABLISHED")]),_._v("状态。")]),_._v(" "),s("ul",[s("li",[_._v("第一次挥手")])]),_._v(" "),s("p",[_._v("客户端想要关闭连接，向服务器发送"),s("code",[_._v("FIN")]),_._v("报文，发送完毕后，客户端进入"),s("code",[_._v("FIN_WAIT_1")]),_._v("状态。")]),_._v(" "),s("ul",[s("li",[_._v("第二次挥手")])]),_._v(" "),s("p",[_._v("服务端收到该"),s("code",[_._v("FIN")]),_._v("报文后，就向客户端发送"),s("code",[_._v("ACK")]),_._v("应答报文，接着服务端进入"),s("code",[_._v("CLOSED_WAIT")]),_._v("状态。")]),_._v(" "),s("p",[_._v("客户端接收到服务端的"),s("code",[_._v("ACK")]),_._v("应答报文后，进入"),s("code",[_._v("FIN_WAIT_2")]),_._v("状态。")]),_._v(" "),s("ul",[s("li",[_._v("第三次挥手")])]),_._v(" "),s("p",[_._v("服务端处理完数据后，向客户端发送"),s("code",[_._v("FIN")]),_._v("报文，发送完毕后，服务器端进入"),s("code",[_._v("LAST_ACK")]),_._v("状态。")]),_._v(" "),s("ul",[s("li",[_._v("第四次挥手")])]),_._v(" "),s("p",[_._v("客户端接收到来自服务端的"),s("code",[_._v("FIN")]),_._v("报文后，回一个"),s("code",[_._v("ACK")]),_._v("应答报文，并进入"),s("code",[_._v("TIME_WAIT")]),_._v("状态。")]),_._v(" "),s("p",[_._v("服务端接收到这个确认包之后，关闭连接，进入"),s("code",[_._v("CLOSED")]),_._v("状态，至此"),s("strong",[_._v("服务端已经完成连接的关闭")]),_._v("。")]),_._v(" "),s("p",[_._v("客户端等待了"),s("code",[_._v("2MSL")]),_._v("之后，自动进入"),s("code",[_._v("CLOSED")]),_._v("状态，"),s("strong",[_._v("至此客户端也完成连接的关闭")]),_._v("。")])])}),[],!1,null,null,null);v.default=e.exports}}]);